datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  id_token          String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  session_state     String?
  theme             String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  roles         String[]   @default(["user"])
  avatar        String?
  accounts      Account[]
  sessions      Session[]
  exercise      Exercise[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Muscle {
  id        String               @id @default(auto()) @map("_id") @db.ObjectId
  name      String               @unique
  i18       Json[]               @default([])
  exercises MusclesOnExercises[]
}

model MusclesOnExercises {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  exerciseId String
  muscleId   String
  muscle     Muscle   @relation(fields: [muscleId], references: [id], onDelete: Cascade)
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
}

model Category {
  id        String                @id @default(auto()) @map("_id") @db.ObjectId
  name      String                @unique
  i18       Json[]                @default([])
  exercises CategoryOnExercises[]
}

model CategoryOnExercises {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  exerciseId String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
}

model Exercise {
  id          String                @id @default(auto()) @map("_id") @db.ObjectId
  name        String                @unique
  description String?
  videos      String[]              @default([])
  images      String[]              @default([])
  i18         Json[]                @default([])
  categories  CategoryOnExercises[]
  muscles     MusclesOnExercises[]
  userId      String
  user        User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  visible     Boolean               @default(false)
}

//Post Exercise
